module.exports = class PSD_MGR {

	SERIVCE_PORT = 0x0D;
	APP_ID 		 = 0x02;
	
	EM_C2H 	 = 0x80;
	EM_REPLY = 0x20;
	
	NAK 	= 0x00;
	AWK 	= 0x01;
	OTHER 	= 0x02;
	
	H2C_RQST_INIT 						  = 0x01;
	H2C_RQST_GET_NEXT_ACCOUNT_FOR_DISPLAY = 0x03;
	H2C_RQST_GET_NEXT_ACCOUNT_DATA 		  = 0x04;
	H2C_RQST_GET_ACCOUNT_PASS 			  = 0x05;
	H2C_RQST_CHECK_ACCOUNT 				  = 0x06;
	H2C_RQST_ADD_ACCOUNT 				  = 0x07;
	H2C_RQST_EDIT_ACCOUNT 				  = 0x08;
	H2C_RQST_OVERWRITE_ACCOUNT 			  = 0x09;
	H2C_RQST_DELETE_ACCOUNT 			  = 0x0A;
	
	C2H_RPLY_INIT 						  = (this.H2C_RQST_INIT							|this.EM_C2H|this.EM_REPLY);
	C2H_RPLY_GET_NEXT_ACCOUNT_FOR_DISPLAY = (this.H2C_RQST_GET_NEXT_ACCOUNT_FOR_DISPLAY |this.EM_C2H|this.EM_REPLY);
	C2H_RPLY_GET_NEXT_ACCOUNT_DATA 		  = (this.H2C_RQST_GET_NEXT_ACCOUNT_DATA 		|this.EM_C2H|this.EM_REPLY);
	C2H_RPLY_GET_ACCOUNT_PASS 			  = (this.H2C_RQST_GET_ACCOUNT_PASS 			|this.EM_C2H|this.EM_REPLY);
	C2H_RPLY_CHECK_ACCOUNT 				  = (this.H2C_RQST_CHECK_ACCOUNT 				|this.EM_C2H|this.EM_REPLY);
	C2H_RPLY_ADD_ACCOUNT 				  = (this.H2C_RQST_ADD_ACCOUNT 					|this.EM_C2H|this.EM_REPLY);
	C2H_RPLY_EDIT_ACCOUNT 				  = (this.H2C_RQST_EDIT_ACCOUNT 				|this.EM_C2H|this.EM_REPLY);
	C2H_RPLY_OVERWRITE_ACCOUNT 			  = (this.H2C_RQST_OVERWRITE_ACCOUNT 			|this.EM_C2H|this.EM_REPLY);
	C2H_RPLY_DELETE_ACCOUNT 			  = (this.H2C_RQST_DELETE_ACCOUNT 				|this.EM_C2H|this.EM_REPLY);
	
	C2H_RQST_MANUAL_ENTRY	= (0x01 |this.EM_C2H);
	C2H_RQST_RESYNC			= (0x02 |this.EM_C2H);
	C2H_RQST_PIN_ENTRY		= (0x03 |this.EM_C2H);
	
	H2C_RPLY_PIN_ENTRY		= (this.C2H_RQST_PIN_ENTRY |this.EM_REPLY)
	
	constructor(){

	}		
	
	outMsg_request_OpenService(host_name, confirmation_code, host_id){
		var msg = [
			{command:this.H2C_RQST_INIT},
			{name	:host_name},
			{code	:confirmation_code},
			{id		:host_id}
		]
		return msg;
	};
	
	get_outMsg_PINEntry(string){
		var msg = [
			{command: this.H2C_RPLY_PIN_ENTRY},
			{code: string}
		];
		return msg;
	}

	inMsg_reply_OpenService(){
		var msg = [
			{command :ETH_BYTE},
			{response:ETH_BYTE},
		];
		return msg;
	};
	
	outMsg_request_getAccount(num){
		var msg = [
			{command:this.H2C_RQST_GET_NEXT_ACCOUNT_FOR_DISPLAY},
			{index	:num},
		]
		return msg;
	}
	
	inMsg_reply_getAccount(num){
		var msg = [
			{command	:ETH_BYTE},
			{response	:ETH_BYTE},
			{index		:ETH_BYTE},
			{reservce	:ETH_BYTE},
			{url		:ETH_UTF8STRING},
			{username	:ETH_UTF8STRING},
			{name		:ETH_UTF8STRING}
		]
		return msg;
	}
	
	outMsg_request_getAccount_password(curr_url, curr_username){
		var msg = [
			{command :this.H2C_RQST_GET_ACCOUNT_PASS},
			{url	 :curr_url},
			{username:curr_username}
		]
		return msg;
	}
	
	inMsg_reply_getAccount_password(){
		var msg = [
			{command :ETH_BYTE},
			{response:ETH_BYTE},
			{url	 :ETH_UTF8STRING},
			{username:ETH_UTF8STRING},
			{password:ETH_UTF8STRING}
		]
		return msg;
	}
	
	outMsg_request_checkAccount(curr_url, curr_username, curr_password){
		var msg = [
			{command :this.H2C_RQST_CHECK_ACCOUNT},
			{url	 :curr_url},
			{username:curr_username},
			{password:curr_password}
		]
		return msg;
	}
	
	outMsg_request_addAccount(curr_url, curr_username, curr_password, curr_name){
		var msg = [
			{command :this.H2C_RQST_ADD_ACCOUNT},
			{url	 :curr_url},
			{username:curr_username},
			{password:curr_password},
			{name	 :curr_name}
		]
		return msg;
	}
	
	outMsg_request_editAccount(curr_url, curr_username, curr_password, curr_name){
		var msg = [
			{command :this.H2C_RQST_EDIT_ACCOUNT},
			{url	 :curr_url},
			{username:curr_username},
			{password:curr_password},
			{name	 :curr_name}
		]
		return msg;
	}
	
	outMsg_request_overwriteAccount(curr_url, curr_username, curr_password, curr_name){
		var msg = [
			{command :this.H2C_RQST_OVERWRITE_ACCOUNT},
			{url	 :curr_url},
			{username:curr_username},
			{password:curr_password},
			{name	 :curr_name}
		]
		return msg;
	}
	
	outMsg_request_deleteAccount(curr_url, curr_username){
		var msg = [
			{command :this.H2C_RQST_DELETE_ACCOUNT},
			{url	 :curr_url},
			{username:curr_username}
		]
		return msg;
	}
	
	inMsg_reply_generic(){
		var msg = [
			{command :ETH_BYTE},
			{response:ETH_BYTE}
		]
		return msg;
	}
	
	inMsg_request_unsoliscited(){
		var msg = [
			{command:ETH_BYTE},
			{data	:ETH_UTF8STRING}
		]
		return msg;
	}
}

////endByte : 0