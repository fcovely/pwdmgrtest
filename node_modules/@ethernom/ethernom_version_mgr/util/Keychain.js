import * as Keychain from 'react-native-keychain';

module.exports = class KeychainAPI{
	constructor() { }
	
	get_app_key = async (serial_num, app_group) => {
		var result
		if(app_group == null){
			result = await Keychain.getGenericPassword({service: serial_num});
		}else{
			result = await Keychain.getGenericPassword({accessGroup: app_group, service: serial_num});
		}
			
		if(result != false){
			if(this._check_valid_json(result.password) == false){
				this._reset_app_key(serial_num, app_group);
				return false;
			};
		
			if(result.password.includes('pkey') && result.password.includes('pubkey')){
				var json_obj = JSON.parse(result.password);
				if(json_obj.pubkey.length != 128 || json_obj.pkey.length != 64){
					this._reset_app_key(serial_num, app_group);
					return false;
				}
				result.password = json_obj.pkey;
			
			}else{
				this._reset_app_key(serial_num, app_group);
				return false;
			}
		}
		return result;
	}
	
	save_app_key = async (serial_num, public_key, private_key, app_group) => {
		var json_obj = {pubkey: public_key, pkey: private_key};
		var json_string = JSON.stringify(json_obj);
		
		var result
		if(app_group == null){
			result = await Keychain.setGenericPassword(serial_num, json_string, {service: serial_num});
		}else{
			result = await Keychain.setGenericPassword(serial_num, json_string, {accessGroup: app_group, service: serial_num});
		}
		return result;
	}
	
	get_app_token = (APP_ID) => {
		switch(APP_ID){
			case 1:
				return "6$9a(_@|A3nr+p3y-wL$1@8*VFKW,Qt.m@O:fnqo<8#_4wG}pwJvIB*pxKb.sL3r";
				break;
				
			case 2:
				return "aCC[yD|nknX+B^3S$Az,XYc0z:xD5e{$AvOF=F2(7c(c|=bDO(ImP-Ok=-A!j!.q";
				break;
		}
	}
	
	_check_valid_json = (string) => {
		if (/^[\],:{}\s]*$/.test(string.replace(/\\["\\\/bfnrtu]/g, '@')
		.replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
		.replace(/(?:^|:|,)(?:\s*\[)+/g, ''))){
			return true;
		}else{
			return false;
		}
	}
	
	_reset_app_key = async (serial_num, app_group) => {
		if(app_group == null){
			await Keychain.resetGenericPassword({accessGroup: app_group, service: serial_num});
		}else{
			await Keychain.resetGenericPassword({service: serial_num});
		}
	}
	
	render() {
		return null
	}
}
