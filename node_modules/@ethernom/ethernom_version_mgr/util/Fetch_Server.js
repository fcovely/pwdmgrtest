import {Platform} from 'react-native';
const base64 = require('base-64');
import DeviceInfo from 'react-native-device-info';

module.exports = class Fetch_Server{
	
	CURR_PLATFORM = "";
	constructor(company, name, id, version, token) {	
		this.COMPANY_NAME = company;
		this.APP_NAME = name;
		this.APP_ID = id;
		this.APP_VERSION = version;
		
		if(Platform.OS == "ios") this.CURR_PLATFORM = "iOS";
		else this.CURR_PLATFORM = "android";
			
		this.BEARER_TOKEN = token;
	}
	
	GET_CARD_PUB_KEY = "https://updates.ethernom.net:8080/get_app_key"; //CARD PUBLIC KEY
	GET_APP_PRIV_KEY = "https://updates.ethernom.net:8080/get_app_permission"; //APP PRIVATE KEY
	
	CHECK_UPDATES_URL = "https://updates.ethernom.net:8080/check_updates";
	GET_UPDATES_URL	  = "https://updates.ethernom.net:8080/get_image";
	
	//----------------------------------------------------
	//------------- GET CARD APP PERMISSION --------------
	//----------------------------------------------------
	fetch_get_card_app_permission = async (serial_number, manufacturer_id, callback) => {
		var body_data = {
			"sn": serial_number.toLowerCase(),
			"mfg_id": manufacturer_id.toUpperCase(),
			"host_app": {
				"company": this.COMPANY_NAME,
				"name": this.APP_NAME,
				"app_id": this.APP_ID,
				"os": this.CURR_PLATFORM,
				"version": this.APP_VERSION
			}
		};
		
		const response = await fetch(this.GET_CARD_PUB_KEY, {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
				'Authorization': 'Bearer ' + this.BEARER_TOKEN, 
			},
			body: JSON.stringify(body_data),
		})
		.then((resp) => {
			return resp.json();
		})
		.catch((err) => {
			return {error: "Server error"}
		});
		
		callback(response);
	}
	
	//----------------------------------------------------
	//--------------- GET APP PERMISSION -----------------
	//----------------------------------------------------
	fetch_get_app_permission = async (serial_number, manufacturer_id, callback) => {
		var body_data = {
			"sn": serial_number.toLowerCase(),
			"mfg_id": manufacturer_id.toUpperCase(),
			"host_app": {
				"company": this.COMPANY_NAME,
				"name": this.APP_NAME,
				"app_id": this.APP_ID,
				"os": this.CURR_PLATFORM,
				"version": this.APP_VERSION
			}
		};
		
		const response = await fetch(this.GET_APP_PRIV_KEY, {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
				'Authorization': 'Bearer ' + this.BEARER_TOKEN, 
			},
			body: JSON.stringify(body_data),
		})
		.then((resp) => {
			return resp.json();
		})
		.catch((err) => {
			//handle error
			return {error: "Server error"}
		});
		
		callback(response);
	}
	
	//----------------------------------------------------
	//------------------ CHECK VERSION -------------------
	//----------------------------------------------------
	fetch_check_updates = async (serial_number, manufacturer_id, firmware_version, nrf_version, callback) => {
		var body_data = {
			"sn": serial_number.toLowerCase(),
			"mfg_id": manufacturer_id.toUpperCase(),
			"host_app": {
				"company": this.COMPANY_NAME,
				"name": this.APP_NAME,
				"app_id": this.APP_ID,
				"os": this.CURR_PLATFORM,
				"version": this.APP_VERSION
			},
			"fw_info": [
				{"type": "1", "version": firmware_version.toLowerCase()},
				{"type": "2", "version": nrf_version.toLowerCase()}
			]
		};
		
		const response = await fetch(this.CHECK_UPDATES_URL, {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
				'Authorization': 'Bearer ' + this.BEARER_TOKEN, 
			},
			body: JSON.stringify(body_data),
		})
		.then((resp) => {
			return resp.json();
		})
		.catch((err) => {
			//handle error
			return {error: "Server error"}
		});
		
		callback(response);
	}
	
	//----------------------------------------------------
	//----------------- GET MAIN VERSION -----------------
	//----------------------------------------------------
	fetch_get_firmware_image = async (serial_number, manufacturer_id, request_firmware_version, callback) => {
		var body_data = {
			"sn": serial_number.toLowerCase(),
			"mfg_id": manufacturer_id.toUpperCase(),
			"host_app": {
				"company": this.COMPANY_NAME,
				"name": this.APP_NAME,
				"app_id": this.APP_ID,
				"os": this.CURR_PLATFORM,
				"version": this.APP_VERSION
			},
			"type": "1",
			"version": request_firmware_version.toLowerCase()
		}
		
		const response = await fetch(this.GET_UPDATES_URL, {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
				'Authorization': 'Bearer ' + this.BEARER_TOKEN, 
			},
			body: JSON.stringify(body_data),
		})
		.then((resp) => {
			return resp.json();
		})
		.catch((err) => {
			//handle error
			return {error: "Server error"}
		});

		callback(response);
	}

	//----------------------------------------------------
	//------------------ GET NRF VERSION -----------------
	//----------------------------------------------------
	fetch_get_nrf_firmware_image = async (serial_number, manufacturer_id, request_nrf_version, callback) => {
		var body_data = {
			"sn": serial_number.toLowerCase(),
			"mfg_id": manufacturer_id.toUpperCase(),
			"host_app": {
				"company": this.COMPANY_NAME,
				"name": this.APP_NAME,
				"app_id": this.APP_ID,
				"os": this.CURR_PLATFORM,
				"version": this.APP_VERSION
			},
			"type": "2",
			"version": request_nrf_version.toLowerCase()
		}
		
		const response = await fetch(this.GET_UPDATES_URL, {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
				'Authorization': 'Bearer ' + this.BEARER_TOKEN, 
			},
			body: JSON.stringify(body_data),
		})
		.then((resp) => {
			return resp.json();
		})
		.catch((err) => {
			//handle error
			return {error: "Server error"}
		});
		
		callback(response);
	}
	
	render() {
		return null
	}
}