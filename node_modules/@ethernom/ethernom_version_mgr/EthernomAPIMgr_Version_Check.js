import {Platform, Linking} from 'react-native';
import NetInfo from "@react-native-community/netinfo";

//Utility
const Fetch_Server = require('./util/Fetch_Server.js');
const Conversion = require('./util/Conversion.js');
const KeychainAPI = require('./util/Keychain.js');

const C_Function = new Conversion();
const Secret = new KeychainAPI();

var Buffer = require('buffer/').Buffer;
const EC = require('elliptic').ec;
const ec = new EC('p256');
import { sha256 } from "js-sha256";

module.exports = class VERSION_MGR {
	// host to card
	CM_INIT_APP_PERM      = 0x87;
	CM_AUTHENTICATE_RSP   = 0x88;
	CM_SESSION_REQUEST    = 0x8B;
	CM_SESSION_RECONNECT  = 0x8C;
	CM_SESSION_TERMINATE  = 0x8D;
	
	CM_RSP 				  = 0x01;
	CM_AUTHENTICATE 	  = 0x08;
	CM_ERR_SUCCESS 		  = 0x00;
	CM_SESSION_RSP    	  = 0x0B;
	
	DL_VERSION_CHECK  	  = 0x81;
	DL_BATTERY_CHECK  	  = 0x85;
	DL_BLE_VERSION_CHECK  = 0x88;
	DL_GET_MANU_NUM 	  = 0x8A;
	DL_GET_SERIAL_NUM	  = 0x8B;
	DL_READ_APP_PERM_KEY  = 0x90;
	
	// card to host
	DL_VERSION_RSP        = 0x01;
	DL_ERROR_RSP		  = 0x04;
	DL_BATTERY_RSP        = 0x05;
	DL_BLE_VERSION_RSP    = 0x08;
	DL_GET_MANU_NUM_RSP   = 0x0A;
	DL_GET_SERIAL_NUM_RSP = 0x0B;
	DL_READ_APP_PERM_KEY_RSP = 0x10;
	
	USING_LOCAL_PKEY = false;
	
	//REQUEST APP AUTH
	outMsg_reqAppAuth = [
		{command: this.CM_INIT_APP_PERM},
		{p1		: 0},
		{len	: {encoding:ETH_INT_AS_2BYTE, value: 1}},
		{id		: 0}
	];
	
	//REQUEST READ APP PERMISSION
	outMsg_reqReadAppPerm = [
		{command: this.DL_READ_APP_PERM_KEY},
		{p1		: 0},
		{len	: {encoding:ETH_INT_AS_2BYTE, value: 1}},
		{id		: 0}
	]
	
	//REQUEST APP CHALLENGE RESPONSE
	outMsg_reqAppAuthResp = [
		{command: this.CM_AUTHENTICATE_RSP},
		{p1		: 0},
		{len	: {encoding:ETH_INT_AS_2BYTE, value: 0}},
		{array	: {encoding:ETH_AS_ARRAY,     value: null}}
	];
	
	//REQUEST SERIAL NUMBER
	outMsg_reqSerial = [
		{command: this.DL_GET_SERIAL_NUM},
		{p1		: 0},
		{len	: {encoding:ETH_INT_AS_2BYTE, value: 0}}
	];
	
	//REQUEST MANUFACTURER ID
	outMsg_reqManu = [
		{command: this.DL_GET_MANU_NUM},
		{p1		: 0},
		{len	: {encoding:ETH_INT_AS_2BYTE, value: 0}}
	];
	
	//REQUEST MAIN VERSION
	outMsg_reqVersion = [
		{command: this.DL_VERSION_CHECK},
		{p1		: 0},
		{len	: {encoding:ETH_INT_AS_2BYTE, value: 0}}
	];
	
	//REQUEST BLE VERSION
	outMsg_reqBLEVersion = [
		{command: this.DL_BLE_VERSION_CHECK},
		{p1		: 0},
		{len	: {encoding:ETH_INT_AS_2BYTE, value: 0}}
	];
	
	//RESPONSE MESSAGE
	inMsg_respGeneric = [
		{payload: ETH_PAYLOAD},
		{command: ETH_BYTE},
		{p1		: ETH_BYTE},
		{len	: ETH_2BYTE}
	];
	
	//REQUEST BATTERY
	outMsg_reqBattey = [
		{command: this.DL_BATTERY_CHECK},
		{p1		: 0},
		{len	: {encoding:ETH_INT_AS_2BYTE, value: 0}}
	];
	
	inMsg_respBattey = [
		{payload: ETH_PAYLOAD},
		{command: ETH_BYTE},
		{p1		: ETH_BYTE},
		{len	: ETH_2BYTE},
		{level	: ETH_2BYTE}
	];
	
	constructor(e_id, company, name, id, version, app_group){
		this.ETH_APP_ID = e_id;
		this.APP_GROUP = app_group;
		var token = Secret.get_app_token(this.ETH_APP_ID);
		this.FServer = new Fetch_Server(company, name, id, version, token);
		
		NetInfo.addEventListener(state => { });
	}
	
	request_app_auth = (E_API, callback) => {
		this.USING_LOCAL_PKEY = false;
		this.private_key = null;
		this.pub_key = null;
		
		if(this.check_app_auth_callback != null) this.check_app_auth_callback = null;
		this.check_app_auth_callback = callback;	
		
		console.log(E_API);
		
		var parent = this;
		Secret.get_app_key(E_API.currSN, this.APP_GROUP).then(function(keychain){
			if(keychain == false){
				parent._check_get_private_key(E_API);
			
			}else{
				parent.USING_LOCAL_PKEY = true;
				parent.private_key = keychain.password;
				parent._write_card_init_auth(E_API);
			}
		});
		//this._write_card_generic(E_API, this.outMsg_reqAppAuth, this.inMsg_respGeneric);
	}
	
	request_check_version = (E_API, callback) => {
		if(this.check_version_callback != null) this.check_version_callback = null;
		this.check_version_callback = callback;
		this.trigger_updates = false;
		this._write_card(E_API, this.outMsg_reqManu, this.inMsg_respGeneric);
		//this._write_card(E_API, this.outMsg_reqSerial, this.inMsg_respGeneric);
	}
	
	request_check_battery = (E_API, callback) => {
		if(this.check_battery_callback != null) this.check_battery_callback = null;
		this.check_battery_callback = callback;
		this._write_card(E_API, this.outMsg_reqBattey, this.inMsg_respBattey);
	}
	
	request_session = (E_API, app_id, host_name, PIN, PIN_len, callback) => {
		if(this.session_callback != null) this.session_callback = null;
		this.session_callback = callback;
		
		var out_msg
		if(PIN == null){
			out_msg = [
				{command: this.CM_SESSION_REQUEST},
				{p1		: 0},
				{len	: {encoding:ETH_INT_AS_2BYTE, value: 19}},
				{id		: app_id},
				{name	: {encoding:ETH_AS_ARRAY, value: C_Function.string_to_array(host_name, 15)}},
				{null1	: 0},
				{len	: PIN_len}
			];
	
		}else{
			out_msg = [
				{command: this.CM_SESSION_RECONNECT},
				{p1		: 0},
				{len	: {encoding:ETH_INT_AS_2BYTE, value: 25}},
				{id		: app_id},
				{name	: {encoding:ETH_AS_ARRAY, value: C_Function.string_to_array(host_name, 15)}},
				{null1	: 0},
				{pin	: {encoding:ETH_AS_ARRAY, value: C_Function.string_to_array(PIN, 6)}},
				{len	: PIN_len}
			];
		}
		this._write_card_session(E_API, out_msg, this.inMsg_respGeneric);
	};
	
	//------------------------------------------------
	//------------------ URL Scheme ------------------
	//------------------------------------------------
	IOS_DM_URL = "com.ethernom.device.manager.mobile://"
	IOS_DM_STORE_URL = "https://apps.apple.com/us/app/ethernom-device-manager/id1490464053?ls=1"
	
	request_launch_dm = (peripheral_id) => {
		var url_scheme_string = "";
		if(Platform.OS == "ios"){
			if(peripheral_id != "") url_scheme_string = this.IOS_DM_URL + "peripheral?id=" + peripheral_id;
			else url_scheme_string = this.IOS_DM_URL;
			
			Linking.canOpenURL(url_scheme_string).then(supported => {
				if(supported == false){
					this._launch_app_store();
				}else{
					Linking.openURL(url_scheme_string);
				}
			}, (err) => { this._launch_app_store() });
			
		}else{
		
		}
	}
	
	_launch_app_store = () => {
		if(Platform.OS == "ios"){
			Linking.canOpenURL(this.IOS_DM_STORE_URL).then(supported => {
				supported && Linking.openURL(this.IOS_DM_STORE_URL);
			}, (err) => console.log(err));
			
		}else{
		
		}
	}
	
	//------------------------------------------------
	//------------------- WRITING --------------------
	//------------------------------------------------
	_write_card_init_auth = (E_API) => {
		console.log("Init app permission");
		
		var out_msg = this.outMsg_reqAppAuth;
		out_msg[3].id = this.ETH_APP_ID;
		
		/*
		var parent = this;
		this.write_timeout = setTimeout(function () {
			parent._write_card_init_auth(E_API);
		}, 5000);
		*/
		
		E_API.WriteJSON_Generic(out_msg, this.inMsg_respGeneric, (resultCode, msg) => {
			if(resultCode === ETH_SUCCESS){
				//clearTimeout(this.write_timeout);
				
				var msg_obj = JSON.parse(msg);
				this._process_init_auth(E_API, msg_obj);
			}
		});
	};
	
	_write_card_read_perm = (E_API) => {
		console.log("Reading app permission");
		
		var out_msg = this.outMsg_reqReadAppPerm;
		out_msg[3].id = this.ETH_APP_ID;
		
		/*
		var parent = this;
		this.write_timeout = setTimeout(function () {
			parent._write_card_read_perm(E_API);
		}, 5000);
		*/
		
		E_API.WriteJSON_DL(out_msg, this.inMsg_respGeneric, (resultCode, msg) => {
			if(resultCode === ETH_SUCCESS){
				//clearTimeout(this.write_timeout);
				
				var msg_obj = JSON.parse(msg);
				this._process_read_perm(E_API, msg_obj);
			}
		});
	}
	
	_write_card_session = (E_API, out_msg, in_msg) => {
		console.log("Init session...");
		
		/*
		var parent = this;
		this.write_timeout = setTimeout(function () {
			parent._write_card_session(E_API, out_msg, in_msg);
		}, 5000);
		*/
		
		E_API.WriteJSON_Generic(out_msg, this.inMsg_respGeneric, (resultCode, msg) => {
			if(resultCode === ETH_SUCCESS){
				//clearTimeout(this.write_timeout);
				
				var msg_obj = JSON.parse(msg);
				this._process_session(E_API, msg_obj);
			}
		});
	};
	
	_write_card_generic = (E_API, out_msg, in_msg) => {
		/*
		var parent = this;
		this.write_timeout = setTimeout(function () {
			parent._write_card_generic(E_API, out_msg, in_msg);
		}, 5000);
		*/
		
		E_API.WriteJSON_Generic(out_msg, in_msg, (resultCode, msg) => {
			if(resultCode === ETH_SUCCESS){
				//clearTimeout(this.write_timeout);
				
				var msg_obj = JSON.parse(msg);
				this._process_check_auth(E_API, msg_obj);
			}
		});
	};
	
	_write_card = (E_API, out_msg, in_msg) => {
		/*
		var parent = this;
		this.write_timeout = setTimeout(function () {
			parent._write_card_generic(E_API, out_msg, in_msg);
		}, 5000);
		*/
		
		E_API.WriteJSON_DL(out_msg, in_msg, (resultCode, msg) => {
			if(resultCode === ETH_SUCCESS){
				//clearTimeout(this.write_timeout);
				
				var msg_obj = JSON.parse(msg);
				this._process_version_check_message(E_API, msg_obj);
			}
		});
	};
	
	//GENERATE authentication response
	_generate_auth_rsp = (challenge) => {
		let key = ec.keyFromPrivate(this.private_key);
		let hash = sha256(challenge);
		let sig = key.sign(hash);
		
		let sig64 = Buffer.concat([
			sig.r.toArrayLike(Buffer, 'be', 32),
			sig.s.toArrayLike(Buffer, 'be', 32)
		]);
		
		var msg = this.outMsg_reqAppAuthResp;
		msg[2].len.value = sig64.length;
		msg[3].array.value = Array.from(sig64);
		
		return msg;
	}
	
	//------------------------------------------------
	//------------------- READING --------------------
	//------------------------------------------------
	_process_init_auth = (E_API, msg) => {
		msg.payload = msg.payload.slice(4, msg.payload.length);
		switch(msg.command){
			case this.CM_AUTHENTICATE:
				console.log("Authenticating");
				let challenge = msg.payload;
				var out_msg = this._generate_auth_rsp(challenge);
				this._write_card_generic(E_API, out_msg, this.inMsg_respGeneric);
				break;
				
			default:
				console.log("Invalid cmd");
				if(this.check_app_auth_callback != null) this.check_app_auth_callback(E_API, false);
				break;
		}
	}
	
	_process_check_auth = (E_API, msg) => {
		msg.payload = msg.payload.slice(4, msg.payload.length);
		switch(msg.command){
			case this.CM_RSP:
				if(msg.payload[0] == this.CM_ERR_SUCCESS){
					console.log("Authenticate success!");
					//Secret.save_app_key(E_API.currSN, this.public_key, this.private_key, this.APP_GROUP);
					//if(this.check_app_auth_callback != null) this.check_app_auth_callback(E_API, true);
					
					//this._write_card_read_perm(E_API);
					if(this.USING_LOCAL_PKEY == false){
						console.log("Request read app permission");
						this._write_card_read_perm(E_API);
					
					}else{
						if(this.check_app_auth_callback != null) this.check_app_auth_callback(E_API, true);
						this.private_key = null;
						this.pub_key = null;
					}
					
				}else{
					console.log("Authenticate fails");
					if(this.USING_LOCAL_PKEY == true){
						console.log("Try authenticate using server key");
						this._check_get_private_key(E_API);
					
					}else{
						console.log("Invalid cmd");
						if(this.check_app_auth_callback != null) this.check_app_auth_callback(E_API, false);
						this.private_key = null;
						this.pub_key = null;
					}
				}
				break;
				
			default:
				console.log("Invalid cmd");
				console.log(msg.payload);
				if(this.check_app_auth_callback != null) this.check_app_auth_callback(E_API, false);
				this.private_key = null;
				this.pub_key = null;
				break;
		}
	}
	
	_process_read_perm = (E_API, msg) => {
		msg.payload = msg.payload.slice(4, msg.payload.length);
		console.log(msg);
		switch(msg.command){
			case this.DL_READ_APP_PERM_KEY_RSP:
				var id = msg.payload.pop();
				var key = Buffer.from(msg.payload);
				this.pub_key = key.toString('hex');
				Secret.save_app_key(E_API.currSN, this.pub_key, this.private_key, this.APP_GROUP);
				if(this.check_app_auth_callback != null) this.check_app_auth_callback(E_API, true);
				break;
			
			default:
				console.log("Invalid cmd");	
				if(this.check_app_auth_callback != null) this.check_app_auth_callback(E_API, false);
				break;
		}
				
		this.private_key = null;
		this.pub_key = null;
	}
	
	_process_session = (E_API, msg) => {
		msg.payload = msg.payload.slice(4, msg.payload.length);
		switch(msg.command){
			case this.CM_SESSION_RSP:
				var PIN = C_Function.parse_string(0, 6, msg.payload);
				this.session_callback(PIN);
				break;
				
			case this.CM_RSP:
				if(msg.payload[0] == this.CM_ERR_SUCCESS){
					this.session_callback(false);
				}
				break;
		}
	}
	
	_process_version_check_message = (E_API, msg) => {
		msg.payload = msg.payload.slice(4, msg.payload.length);
		switch(msg.command){
			case this.DL_GET_SERIAL_NUM_RSP:
				this.sn = "";
				msg.payload = msg.payload.reverse();
				var buf = Buffer.from(msg.payload);
				this.sn = buf.toString('hex');
				this._write_card(E_API, this.outMsg_reqManu, this.inMsg_respGeneric);
				break;
			
			case this.DL_GET_MANU_NUM_RSP:
				this.m_id = "";
				for(var i=0; i<msg.payload.length; i++){
					if(msg.payload[i] != 0) this.m_id += String.fromCharCode(msg.payload[i]);
				}
				this._write_card(E_API, this.outMsg_reqVersion, this.inMsg_respGeneric);
				break;
			
			case this.DL_VERSION_RSP:
				this.curr_name = C_Function.parse_string(0, 16, msg.payload);
				this.curr_version = C_Function.parse_string(16, msg.payload.length, msg.payload);
				this._write_card(E_API, this.outMsg_reqBLEVersion, this.inMsg_respGeneric);
				break;
			
			case this.DL_BLE_VERSION_RSP:
				this.curr_ble_version = C_Function.parse_string(0, msg.payload.length, msg.payload);
				this._check_with_server(E_API);
				break;
			
			case this.DL_BATTERY_RSP:
				var battery_low = false;
				if(msg.level <= 3600) battery_low = true;
				this.check_battery_callback(E_API, battery_low);
				break;
			
			default:
				break;
		}
	};
	
	//---------------------------------------------------------------------
	//------------------------- PRIVATE: REST API -------------------------
	//---------------------------------------------------------------------
	_check_internet_availability = () => {
		return NetInfo.fetch().then(state => {
			if((state.type == "wifi" || state.type == "cellular") && state.isInternetReachable == true){
				return true;
			}else{
				return false;
			}
		});
	}
	
	_check_get_private_key = async (E_API) => {
		this.USING_LOCAL_PKEY = false;
		
		var result = await this._check_internet_availability();
		if(result == false){
			this.check_app_auth_callback(E_API, -1);
			E_API = null;
			return;
		}
		
		this.FServer.fetch_get_card_app_permission(E_API.currSN, "XYYMMDDZZZZZ", callback = (result) => {
			console.log(result);
			if(result.hasOwnProperty("pkey")){
				this.private_key = result.pkey;
				this._write_card_init_auth(E_API);
			
			}else{
				console.log("Error");
				if(this.check_app_auth_callback != null) this.check_app_auth_callback(E_API, false);
				E_API = null;
			}
		})
	}
	
	_check_with_server = async (E_API) => {
		var result = await this._check_internet_availability();
		if(result == false){
			this.update_list = new Array(4).fill(0);
			this.check_version_callback(E_API, false);
			E_API = null;
			return;
		}
	
		this.FServer.fetch_check_updates(E_API.currSN, this.m_id, this.curr_version, this.curr_ble_version, callback = (result) => {
			if(result.hasOwnProperty("error")){
				this.check_version_callback(E_API, -1);
				E_API = null;
				return;
			}

			if(result.fw_info.length > 0){
				this.check_version_callback(E_API, true);
			}else{
				this.check_version_callback(E_API, false);
			}
			E_API = null;
		});
	}
}