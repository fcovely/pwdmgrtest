package com.ethernom.android.etherapi.linkLayer;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothGatt;
import android.bluetooth.BluetoothGattCallback;
import android.bluetooth.BluetoothGattCharacteristic;
import android.bluetooth.BluetoothGattDescriptor;
import android.bluetooth.BluetoothManager;
import android.bluetooth.le.BluetoothLeScanner;
import android.bluetooth.le.ScanCallback;
import android.bluetooth.le.ScanFilter;
import android.bluetooth.le.ScanResult;
import android.bluetooth.le.ScanSettings;
import android.content.Context;
import android.os.Handler;
import android.os.ParcelUuid;
import java.util.UUID;
import android.text.style.TtsSpan;
import android.util.Log;
import android.util.SparseArray;

import com.ethernom.android.etherapi.CardInfo;
import com.ethernom.android.etherapi.DiscoverServiceListener;
import com.ethernom.android.etherapi.EtherError;
import com.ethernom.android.etherapi.EtherTransportProtocol;

import java.util.Arrays;

import static com.ethernom.android.etherapi.EtherError.ETH_FAIL;
import static com.ethernom.android.etherapi.EtherError.ETH_SUCCESS;

public class EtherBTAdapter extends EtherCommAdapter {
    static String TAG = "EtherBTAdapter";

    static UUID ETH_serviceUUID = UUID.fromString("19490001-5537-4F5E-99CA-290F4FBFF142");
    static UUID ETH_characteristicUUID = UUID.fromString("19490002-5537-4F5E-99CA-290F4FBFF142");

    private String _adapterAddress;
    private Context _context;
    private CardInfo _cardInfo;
    private int _servicePort; // AO on the card or what a dev would call a service
    private byte _downloader_servicePort = (byte)0x14;

    private BluetoothAdapter mBluetoothAdapter;
    private Handler mHandler;
    private long _scanMSecsTimeout = 30000;
    private BluetoothLeScanner mLEScanner;
    private ScanSettings settings;
    private List<ScanFilter> filters;
    private BluetoothDevice periphEthCard;
    private BluetoothGatt gatt;
    private BluetoothGattCharacteristic ethCharacteristic;

    private String eth_advServiceUUD;
    private int maxByteSize = 244;

    // IETHERCOMADAPTER
    public TInterface GetInterface() {
        return TInterface.BLE;
    }

    // these need to set the link layer specific address of the BLE adapter, COM/USB adapter or NFC
    // as appropriate to the link layer in question
    public String GetAdapterAddress() {
        return _adapterAddress;
    }

    public void SetAdapterAddress(String adapterAddress) {
        _adapterAddress = adapterAddress;
    }

    public void StopDiscovery(){
        scanLeDevice(false);
    }
    private void scanLeDevice(final boolean enable) {
        if (enable) {
            // check for timeout
            if(_scanMSecsTimeout != -1){
                mHandler.postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        mLEScanner.stopScan(mScanCallback);
                        mHandler.removeCallbacksAndMessages(null);
                    }
                }, _scanMSecsTimeout);
            }
            mLEScanner.startScan(filters, settings, mScanCallback);
        } else {
            if (mLEScanner != null) {
                mLEScanner.stopScan(mScanCallback);
                mHandler.removeCallbacksAndMessages(null);
            }
        }
    }

    public void CardClose(){
        scanLeDevice(false);
        if(gatt != null)
            gatt.close();
        if (CardEventListener != null)
            CardEventListener.onCardClosedSucess(ETH_SUCCESS);
    }
    public UUID convertFromInteger(int i) {
        final long MSB = 0x0000000000001000L;
        final long LSB = 0x800000805f9b34fbL;
        long value = i & 0xFFFFFFFF;
        return new UUID(MSB | (value << 32), LSB);
    }


    public void CardOpen(CardInfo cardInfo){
        Log.i(TAG, "found specific ethernom card");
        if(mLEScanner != null)
            mLEScanner.stopScan(mScanCallback);

        periphEthCard = mBluetoothAdapter.getRemoteDevice(cardInfo.GetDeviceID());
        gatt = periphEthCard.connectGatt(_context, false, gattCallback);
    }

    BluetoothGattCallback gattCallback =
            new BluetoothGattCallback() {
                @Override
                public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState) {
                    if (newState == BluetoothGatt.STATE_CONNECTED) {
                        Log.i(TAG, "gatt connected, discover services");
                        gatt.discoverServices();
                    }
                    if(newState == BluetoothGatt.STATE_DISCONNECTED){
                        Log.i(TAG,"gat disconnected");
                        if(CardEventListener != null) {
                            //CardEventListener.onCardConnectionDropped(status);
                            CardEventListener.onCardConnectionDropped(ETH_SUCCESS);
							gatt.close();
                        }
                    }
                }

                @Override
                public void onServicesDiscovered(BluetoothGatt gatt, int status) {
                    ethCharacteristic = gatt.getService(ETH_serviceUUID).getCharacteristic(ETH_characteristicUUID);
                    UUID CLIENT_CHARACTERISTIC_CONFIG_UUID = convertFromInteger(0x2902);
                    if (ethCharacteristic != null) {
                        Log.i(TAG, "onServicesDiscovered, ethernom characteristic found");
                        BluetoothGattDescriptor descriptor = ethCharacteristic.getDescriptor(CLIENT_CHARACTERISTIC_CONFIG_UUID);
                        if (descriptor != null) {
                            descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);
                            gatt.setCharacteristicNotification(ethCharacteristic, true);
                            Log.i(TAG, "onServicesDiscovered, gatt write descriptor");
                            gatt.writeDescriptor(descriptor);
                        }
                        //gatt.setCharacteristicNotification(ethCharacteristic, true);
                    }
                }

                @Override
                public void onDescriptorWrite(BluetoothGatt gatt, BluetoothGattDescriptor descriptor, int status) {
                    Log.i(TAG, "onDescriptorWrite, gatt write descriptor: "+Integer.toString(status));
                    if (CardEventListener != null) {
                        Log.i(TAG, "onDescriptorWrite, fire listener");

                        if (status == 0)
                            CardEventListener.onCardOpenSuccess(ETH_SUCCESS);
                        else
                            CardEventListener.onCardOpenFail(ETH_FAIL, status);
                    }
                }

                @Override
                public void onCharacteristicWrite(BluetoothGatt gatt,
                                                  BluetoothGattCharacteristic characteristic,
                                                  int status) {
                    if (CardEventListener != null) {
                        if (status != 0) {
                            CardEventListener.onWriteToCardFail(ETH_FAIL, status);
                            Log.i(TAG, "oncharacteristicwrite failed write");
                        } else {
                            CardEventListener.onWriteToCardSuccess(ETH_SUCCESS);
                            Log.i("EtherBLE", "oncharacteristicwrite success");
                        }
                    }
                }

                @Override
                public void onCharacteristicRead(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, int status) {
                    if (status != 0)
                        Log.i("EtherBLE", "oncharacteristicread failed write");
                    else
                        Log.i("EtherBLE", "oncharacteristicread success");

                }

                @Override
                public void onCharacteristicChanged(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic) {
                    byte[] value = characteristic.getValue();
                    if (CardEventListener != null) {
                        CardEventListener.onReadFromCardSuccess(ETH_SUCCESS, value);
                    }
                };
            };

    public void Init(int servicePort, long secsTimeout, boolean allowDuplicates, boolean stopScanOnWrite, Context context){
        _scanAllowDuplicates = allowDuplicates;
        if (secsTimeout == -1)
            _scanMSecsTimeout = -1;
        else
            _scanMSecsTimeout = secsTimeout*1000;
        _scanStopScanOnWrite = stopScanOnWrite;

        mHandler = new Handler();
        _context = context;
        _servicePort = servicePort;
        final BluetoothManager bluetoothManager =
                (BluetoothManager) (context.getSystemService(Context.BLUETOOTH_SERVICE));
        mBluetoothAdapter = bluetoothManager.getAdapter();
        if(servicePort != _downloader_servicePort) {
            eth_advServiceUUD = "19490016-5537-4f5e-99ca-290f4fbff142";
        }else {
            String portAsHex = String.format("%02x", servicePort);
            eth_advServiceUUD = "194900" + portAsHex + "-5537-4f5e-99ca-290f4fbff142";
        }
    }

    public void Init(String UUID, long secsTimeout, boolean allowDuplicates, boolean stopScanOnWrite, Context context){
        _scanAllowDuplicates = allowDuplicates;
        if (secsTimeout == -1)
            _scanMSecsTimeout = -1;
        else
            _scanMSecsTimeout = secsTimeout*1000;
        _scanStopScanOnWrite = stopScanOnWrite;

        mHandler = new Handler();
        _context = context;
        final BluetoothManager bluetoothManager =
                (BluetoothManager) (context.getSystemService(Context.BLUETOOTH_SERVICE));
        mBluetoothAdapter = bluetoothManager.getAdapter();
        eth_advServiceUUD = UUID.toLowerCase();
    }

    public void Discover() {

        _foundCards = new ArrayList<>();
        mLEScanner = mBluetoothAdapter.getBluetoothLeScanner();
        settings = new ScanSettings.Builder()
                .setScanMode(ScanSettings.SCAN_MODE_LOW_LATENCY)
                .build();
        filters = new ArrayList<ScanFilter>();

     //   ScanFilter.Builder builder = new ScanFilter.Builder();
//        builder.setDeviceName(_cardInfo.GetCardName());
  //      filters.add(builder.build());
        //new ParcelUuid(UUIDHelper.uuidFromString(serviceUUIDs.getString(i)))

        if(eth_advServiceUUD.length() > 4) {
            ScanFilter scanFilter = new ScanFilter.Builder()
                    .setServiceUuid(ParcelUuid.fromString(eth_advServiceUUD))
                    .build();
            filters.add(scanFilter);

        }else if(eth_advServiceUUD.length() == 4){
            String UUID_BASE = "0000XXXX-0000-1000-8000-00805f9b34fb";
            String NEW_UUID_BASE = UUID_BASE.replace("XXXX", eth_advServiceUUD);
            ScanFilter scanFilter = new ScanFilter.Builder()
                    .setServiceUuid(ParcelUuid.fromString(NEW_UUID_BASE))
                    .build();
            filters.add(scanFilter);
        }
        scanLeDevice(true);
    }

    // a way to write byte buffers
    public void WriteToCard(byte[] data) {
        //ethCharacteristic.setValue(transportPacket);
        //gatt.writeCharacteristic(ethCharacteristic);

        if(data.length > maxByteSize){
            ethCharacteristic.setWriteType(BluetoothGattCharacteristic.WRITE_TYPE_NO_RESPONSE);
            int dataLength = data.length;
            int count = 0;
            byte[] firstMessage = null;
            List<byte[]> splittedMessage = new ArrayList<>();

            while (count < dataLength && (dataLength - count > maxByteSize)) {
                if (count == 0) {
                    firstMessage = Arrays.copyOfRange(data, count, count + maxByteSize);
                } else {
                    byte[] splitMessage = Arrays.copyOfRange(data, count, count + maxByteSize);
                    splittedMessage.add(splitMessage);
                }
                count += maxByteSize;
            }

            if (count < dataLength) {
                // Other bytes in queue
                byte[] splitMessage = Arrays.copyOfRange(data, count, data.length);
                splittedMessage.add(splitMessage);
            }

            try {
                boolean writeError = false;
                if (!doWrite(firstMessage)) {
                    writeError = true;
                    //callback.invoke("Write failed");
                }

                if (!writeError) {
                    Thread.sleep(10);
                    for (byte[] message : splittedMessage) {
                        if (!doWrite(message)) {
                            writeError = true;
                            //callback.invoke("Write failed");
                            break;
                        }
                        Thread.sleep(10);
                    }

                    if (!writeError) {
                        //callback.invoke("Write success");
                    }
                }
            } catch (InterruptedException e) {
                    //callback.invoke("Write failed");
            }

        }else{
            ethCharacteristic.setWriteType(BluetoothGattCharacteristic.WRITE_TYPE_DEFAULT);
            if(!doWrite(data)){
                //callback.invoke("Write failed");
            };
        }

    }

    public boolean doWrite(byte[] data){
        ethCharacteristic.setValue(data);

        if (!gatt.writeCharacteristic(ethCharacteristic)) {
            Log.d("BLE_MANAGER: WRITE", "Error on doWrite");
            return false;
        }
        return true;
    }

    // END IETHERCOMADAPTER

    private ScanCallback mScanCallback = new ScanCallback() {
        @Override
        public void onScanResult(int callbackType, ScanResult result) {
            Log.i("callbackType", String.valueOf(callbackType));
            Log.i("result", result.toString());
            String devName = result.getScanRecord().getDeviceName();
            if (devName != null && devName.startsWith("ETH!")) {
                if(eth_advServiceUUD.length() > 4) {
                    //SparseArray<byte[]> mdata = result.getScanRecord().getManufacturerSpecificData();
                    //for (int i = 0; i < mdata.size(); i++) {
                        //byte[] mfdata = mdata.get(mdata.keyAt(i));
                        //if (mfdata != null && mfdata.length == 3) {
                            // convert signed byte type to unsigned int
//                        if (manufacturerData[0] == 0x31 && manufacturerData[1] == 1 && manufacturerData[2] == 0x42 && manufacturerData[3] == 0xF1 && manufacturerData[4] == PSD_MGR_PORT) {
                            //int[] manufacturerData = toUnsignedIntArray(mfdata);
                            //if (manufacturerData[2] == _servicePort) {
                                //Log.i(TAG, "oncharacteristicwrite failed write");
                                String device = result.getDevice().toString();
                                if (!_scanAllowDuplicates) {
                                    // see if we already have this card
                                    for (int j = 0; j != _foundCards.size(); j++) {
                                        CardInfo ci = _foundCards.get(j);
                                        if (devName.compareTo(ci.GetCardName()) == 0 && device.compareTo(ci.GetDeviceID()) == 0)
                                            return; //already have it
                                    }
                                    // add to
                                    _foundCards.add(new CardInfo(devName, device));
                                }
                                if (DiscoverServiceEventListener != null) {
                                    DiscoverServiceEventListener.onServiceDiscover(ETH_SUCCESS, device, devName);
                                }
                            //}
                        //}
                    //}
                }else if(eth_advServiceUUD.length() == 4){
                    String device = result.getDevice().toString();
                    if (!_scanAllowDuplicates) {
                        // see if we already have this card
                        for (int j = 0; j != _foundCards.size(); j++) {
                            CardInfo ci = _foundCards.get(j);
                            if (devName.compareTo(ci.GetCardName()) == 0 && device.compareTo(ci.GetDeviceID()) == 0)
                                return; //already have it
                        }
                        // add to
                        _foundCards.add(new CardInfo(devName, device));
                    }
                    if (DiscoverServiceEventListener != null) {
                        DiscoverServiceEventListener.onServiceDiscover(ETH_SUCCESS, device, devName);
                    }
                }
            }
        }

        @Override
        public void onBatchScanResults(List<ScanResult> results) {
            for (ScanResult sr : results) {
                Log.i(TAG, sr.toString());
            }
        }

        @Override
        public void onScanFailed(int errorCode) {
            Log.e("Scan Failed", "Error Code: " + errorCode);
            if (CardEventListener != null)
                CardEventListener.onCardOpenFail(EtherError.ERR_ETH_CARDSCAN_FAILED, errorCode);
        }

        private int[] toUnsignedIntArray(byte[] barray) {

            int[] ret = new int[barray.length];
            for (int i = 0; i < barray.length; i++) {
                ret[i] = barray[i] & 0xff; // Range 0 to 255, not -128 to 127
            }
            return ret;

        }

    };
}
