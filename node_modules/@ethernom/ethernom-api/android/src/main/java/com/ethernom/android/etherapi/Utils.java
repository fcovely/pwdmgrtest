package com.ethernom.android.etherapi;

import java.util.ArrayList;
import java.util.List;

import static com.ethernom.android.etherapi.EtherTransportProtocol.DELIMITER;
import static java.sql.Types.NULL;

public class Utils {
    public static byte [] BytetobyteArray(Byte [] bytes){
        byte[] byteObjects = new byte[bytes.length];
        int i=0;
        for(byte b: bytes)
            byteObjects[i++] = b;  // Autoboxing.
        return byteObjects;
    }

    public static byte[] ByteListtobyteArray(List<Byte> in) {
        final int n = in.size();
        byte ret[] = new byte[n];
        for (int i = 0; i < n; i++) {
            ret[i] = in.get(i);
        }
        return ret;
    }

    public  static List<Byte> GetDelimitedString( String data){
        // Construct payload as series of delimited strings
        List<Byte> payload = new ArrayList<Byte>();
        if (data.length() == 0) {
            payload.add((byte)0);
        } else {
            int cc = 0;
            for(int j=0; j!= data.length(); j++){
                char c = data.charAt(j);
                if (c != NULL) {
                    byte b = (byte) c;
                    payload.add(b);
                }
            }
            if (cc < data.length() - 1) {
                payload.add((byte)DELIMITER);
            }
        }

        return payload;
    }
	
	public  static List<Byte> GetEndedString( String data){
        // Construct payload as series of delimited strings
        List<Byte> payload = new ArrayList<Byte>();
        if (data.length() == 0) {
            payload.add((byte)0);
        } else {
            int cc = 0;
            for(int j=0; j!= data.length(); j++){
                char c = data.charAt(j);
                if (c != NULL) {
                    byte b = (byte) c;
                    payload.add(b);
                }
            }
            if (cc < data.length() - 1) {
                payload.add((byte)0);
            }
        }

        return payload;
    }

}
