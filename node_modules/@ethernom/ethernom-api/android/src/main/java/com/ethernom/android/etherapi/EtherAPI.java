package com.ethernom.android.etherapi;

import android.content.Context;
import android.se.omapi.SEService;
import android.util.Log;

import com.ethernom.android.etherapi.linkLayer.CardEventListener;
import com.ethernom.android.etherapi.linkLayer.EtherBTAdapter;
import com.ethernom.android.etherapi.linkLayer.EtherCommAdapter;

import static com.ethernom.android.etherapi.EtherError.ERR_ETH_DISCONNECTED;
import static com.ethernom.android.etherapi.EtherError.ERR_ETH_SELECT_FAILED;

public class EtherAPI {

    static String TAG= "EtherAPI";
    static int instanceCount = 0;

    // these listeners provide app level callbacks for app developers to use
    // they are callbacks with respect to full Transport layer messages to and from the AO

    EtherCommAdapter _adapter;
    Context _thisContext;
    EtherTransportProtocol transport = null;
    byte openServiceCmd = (byte) -1;

    private byte _downloader_servicePort = (byte)0x14;

    private SelectListener _selectListener = null;
    private ReadListener _readListener = null;
    private DiscoverServiceListener _discoverServiceListener;
    private CardCloseListener _cardClosedListener;
    private UnSolicitedEventListener _unSolicitedEventListener;
    private ConnectionEventListener _connectionEventListener;
    private long _scanSecsTimeout;
    private boolean _scanAllowDuplicates;
    private boolean _scanStopScanOnWrite;
    public int thisId;
    /* CARD EVENTS, these are coming from the layer BELOW the API not to be confused with Events
        we sent to the app via the api.  We accept events from the card here and transform them to
        events to the app
     */
    public void SetupCardListeners(EtherCommAdapter adapter){

        _adapter.SetDiscoverServiceEventListener(new DiscoverServiceListener() {
             @Override
             public void onServiceDiscover(int resultCode, String deviceID, String deviceName) {
                if (_discoverServiceListener != null)
                    _discoverServiceListener.onServiceDiscover(resultCode,deviceID, deviceName);
             }

             @Override
             public void onServiceDiscoverFail(int resultCode, int hwSpecificError) {

             }

             @Override
             public void onServiceDiscoverEnd(int resultCode) {
                 if (_discoverServiceListener != null)
                     _discoverServiceListener.onServiceDiscover(resultCode,"", "");
             }
        });
        _adapter.SetCardEventListener(new CardEventListener() {
            @Override
            public void onCardOpenFail(int resultCode, int hwSpecificError) {
                if (_selectListener != null)
                    _selectListener.onSelectFail(ERR_ETH_SELECT_FAILED, resultCode);
            }

            //public void onCardConnectionDropped(int resultCode);


            @Override
            public void onCardConnectionDropped(int resultCode) {
                if (_connectionEventListener != null)
                    _connectionEventListener.onConnectionDropped(resultCode);
            }

            @Override
            public void onCardOpenSuccess(int resultCode) {
                // the card was opened
                // inform the app side

                if (_selectListener != null)
                    _selectListener.onSelectSuccess(resultCode);
            }

            @Override
            public void onCardClosedByCard(int resultCode) {
                if (_selectListener != null)
                    _selectListener.onDisconnect(ERR_ETH_DISCONNECTED, resultCode);
            }

            @Override
            public void onCardClosedFail(int resultCode, int hwSpecificError) {

            }

            @Override
            public void onCardClosedSucess(int resultCode) {
                if (_cardClosedListener != null)
                    _cardClosedListener.onCardCloseSuccess(resultCode);
            }

            @Override
            public void onReadFromCardFail(int resultCode, int hwSpecificError) {
            }

            @Override
            public void onReadFromCardSuccess(int resultCode, byte[] buffer) {
                // we are coming in here with in theory a full transport layer buffer
                Log.d(TAG, "read from card success");
                // in the old code we check  buffer[1] for this also
                //if (buffer[0] == transport.GetServicePort() || buffer[0] == _downloader_servicePort) {
                    // read agrees with current services
                    if (buffer.length > EtherTransportProtocol.ETH_HEADER_SIZE) {
                        /*
                        byte cmd1 = buffer[0];
                        byte cmd2 = buffer[1];

                        int svcPort = transport.GetServicePort();
                        boolean protocolError = false;
                        if (cmd1 != svcPort || cmd1 != _downloader_servicePort)
                            protocolError = true;
                        int res = svcPort | 0x80;
                        byte b = (byte)res;
                        if (cmd2 != b || (cmd2 != (_downloader_servicePort | 0x80)))
                            protocolError = true;

                        byte cksum = transport.GetTransportMessageCheckSum(buffer);

                        if (cksum != buffer[EtherTransportProtocol.ETH_HEADER_SIZE])
                            protocolError = true;

                        byte csum = buffer[EtherTransportProtocol.ETH_HEADER_SIZE];
                        */

                        if (_readListener != null) {
                            // only deliver the payload
                            byte[] payload = transport.GetApplicationData(buffer);
                            _readListener.onReadSuccess(resultCode, payload);
                        }
                        else if (_unSolicitedEventListener != null){
                            byte[] payload = transport.GetApplicationData(buffer);
                            _unSolicitedEventListener.onUnsolicitedEvent(resultCode, payload);
                        }
                    }
                //}
            }

            @Override
            public void onWriteToCardFail(int resultCode, int hwSpecificError) {
                Log.d(TAG, "write to card failed");

            }

            @Override
            public void onWriteToCardSuccess(int resultCode) {
                Log.d(TAG, "write to card succeeded");

            }
        });
    }

    public EtherAPI(String adapterConnectionString, byte servicePort, long secsTimeout, boolean allowDuplicates, boolean stopScanOnWrite, Context context) {
        _thisContext = context;
        thisId = instanceCount++;
        if (adapterConnectionString.startsWith(("BLE"))) {
            _adapter = new EtherBTAdapter();
            transport = new EtherTransportProtocol(servicePort, _adapter.GetInterface(), TMessageProtocol.APP);
            _adapter.Init(servicePort, secsTimeout, allowDuplicates,stopScanOnWrite, _thisContext);
            SetupCardListeners(_adapter);
        }
        if (adapterConnectionString.startsWith(("NFC"))) {

        }
    }

    public EtherAPI(String adapterConnectionString, String uuid, long secsTimeout, boolean allowDuplicates, boolean stopScanOnWrite, Context context) {
        _thisContext = context;
        thisId = instanceCount++;
        if (adapterConnectionString.startsWith(("BLE"))) {
            _adapter = new EtherBTAdapter();
            _adapter.Init(uuid, secsTimeout, allowDuplicates,stopScanOnWrite, _thisContext);
            SetupCardListeners(_adapter);
        }
    }

    public void ClearUnsolicitedEventListener(){
        _unSolicitedEventListener = null;
    }

    public void ClearReadListener(){
        _readListener = null;
    }

    public void StopDiscovery(){
        Log.d(TAG, "STOP DISCOVERY: "+ thisId);
        _adapter.StopDiscovery();
    }

    public void CardClose(final CardCloseListener closeListener){
        _cardClosedListener = closeListener;
		_adapter.CardClose();
        _discoverServiceListener = null;
    }
    public void OnCardDisconnected(final ConnectionEventListener connectionEventListener){
        _connectionEventListener = connectionEventListener;
    }

    public void SubscribeToUnsolictedEvents(final UnSolicitedEventListener unSolicitedEventListener){
        _readListener = null;
        _unSolicitedEventListener = unSolicitedEventListener;
    }

    // secs timeout of -1 is scan forever or until process is killed
    public void DiscoverDevices(final DiscoverServiceListener discoverServiceListener){
        Log.d(TAG, "STOP DISCOVERY: "+ thisId);
        _discoverServiceListener = discoverServiceListener;
        _adapter.Discover();
    }


    public void Select(CardInfo cardInfo, final SelectListener selectListener) {
        _selectListener = selectListener;
        _adapter.CardOpen(cardInfo);
    }

    //*******************************************************************
    //********************APP WRITE**************************************
    //*******************************************************************
    public void Write(byte [] buffer, final ReadListener readListener) {
        // create a Transport layer packet
        _unSolicitedEventListener = null;
        _readListener = readListener;
        byte[] msg = transport.GetPayload(buffer);
        _adapter.WriteToCard(msg);
    }

    public void Write(byte cmd, final ReadListener readListener){
        // create a Transport layer packet
        _unSolicitedEventListener = null;
        _readListener = readListener;
        byte [] msg = transport.GetPayload(cmd);
        _adapter.WriteToCard(msg);
    }

    public void Write(byte cmd, byte [] buffer, final ReadListener readListener){
        // create a Transport layer packet
        _unSolicitedEventListener = null;
        _readListener = readListener;

        byte [] msg = transport.GetPayload(cmd, buffer);

        _adapter.WriteToCard(msg);
    }

    public void Write(byte cmd, String [] buffer, final ReadListener readListener){
        // create a Transport layer packet
        _unSolicitedEventListener = null;
        _readListener = readListener;

        byte [] msg = transport.GetPayload(cmd, buffer);

        _adapter.WriteToCard(msg);
    }

    public void Write(byte cmd, String buffer, final ReadListener readListener){
        // create a Transport layer packet

        _unSolicitedEventListener = null;
        _readListener = readListener;
        byte [] msg = transport.GetPayload(cmd, buffer);

        _adapter.WriteToCard(msg);
    }

    public void Write(String buffer, final ReadListener readListener){
        // create a Transport layer packet

        _unSolicitedEventListener = null;
        _readListener = readListener;
        byte [] msg = transport.GetPayload(buffer);

        _adapter.WriteToCard(msg);
    }

    //*******************************************************************
    //*********************DL WRITE**************************************
    //*******************************************************************
    //DOWNLOADER TRANSPORT WRITE
    public void Write_DL(byte [] buffer, final ReadListener readListener) {
        // create a Transport layer packet
        _unSolicitedEventListener = null;
        _readListener = readListener;
        byte[] msg = transport.GetPayload_DL(buffer);
        _adapter.WriteToCard(msg);
    }


    public void Write_DL(byte cmd, final ReadListener readListener){
        // create a Transport layer packet
        _unSolicitedEventListener = null;
        _readListener = readListener;
        byte [] msg = transport.GetPayload_DL(cmd);
        _adapter.WriteToCard(msg);
    }

    public void Write_DL(byte cmd, byte [] buffer, final ReadListener readListener){
        // create a Transport layer packet
        _unSolicitedEventListener = null;
        _readListener = readListener;

        byte [] msg = transport.GetPayload_DL(cmd, buffer);

        _adapter.WriteToCard(msg);
    }

    public void Write_DL(byte cmd, String [] buffer, final ReadListener readListener){
        // create a Transport layer packet
        _unSolicitedEventListener = null;
        _readListener = readListener;

        byte [] msg = transport.GetPayload_DL(cmd, buffer);

        _adapter.WriteToCard(msg);
    }

    public void Write_DL(byte cmd, String buffer, final ReadListener readListener){
        // create a Transport layer packet

        _unSolicitedEventListener = null;
        _readListener = readListener;
        byte [] msg = transport.GetPayload_DL(cmd, buffer);

        _adapter.WriteToCard(msg);
    }

    public void Write_DL(String buffer, final ReadListener readListener){
        // create a Transport layer packet

        _unSolicitedEventListener = null;
        _readListener = readListener;
        byte [] msg = transport.GetPayload_DL(buffer);

        _adapter.WriteToCard(msg);
    }

    //*******************************************************************
    //*********************Generic WRITE*********************************
    //*******************************************************************
    //DOWNLOADER TRANSPORT WRITE
    public void Write_Generic(byte [] buffer, final ReadListener readListener) {
        // create a Transport layer packet
        _unSolicitedEventListener = null;
        _readListener = readListener;
        byte[] msg = transport.GetPayload_Generic(buffer);
        _adapter.WriteToCard(msg);
    }


    public void Write_Generic(byte cmd, final ReadListener readListener){
        // create a Transport layer packet
        _unSolicitedEventListener = null;
        _readListener = readListener;
        byte [] msg = transport.GetPayload_Generic(cmd);
        _adapter.WriteToCard(msg);
    }

    public void Write_Generic(byte cmd, byte [] buffer, final ReadListener readListener){
        // create a Transport layer packet
        _unSolicitedEventListener = null;
        _readListener = readListener;

        byte [] msg = transport.GetPayload_Generic(cmd, buffer);

        _adapter.WriteToCard(msg);
    }

    public void Write_Generic(byte cmd, String [] buffer, final ReadListener readListener){
        // create a Transport layer packet
        _unSolicitedEventListener = null;
        _readListener = readListener;

        byte [] msg = transport.GetPayload_Generic(cmd, buffer);

        _adapter.WriteToCard(msg);
    }

    public void Write_Generic(byte cmd, String buffer, final ReadListener readListener){
        // create a Transport layer packet

        _unSolicitedEventListener = null;
        _readListener = readListener;
        byte [] msg = transport.GetPayload_Generic(cmd, buffer);

        _adapter.WriteToCard(msg);
    }

    public void Write_Generic(String buffer, final ReadListener readListener){
        // create a Transport layer packet

        _unSolicitedEventListener = null;
        _readListener = readListener;
        byte [] msg = transport.GetPayload_Generic(buffer);

        _adapter.WriteToCard(msg);
    }
}

