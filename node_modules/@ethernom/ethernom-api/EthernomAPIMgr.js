import {NativeModules, Platform} from 'react-native';
import { DeviceEventEmitter,NativeEventEmitter } from 'react-native';
var Buffer = require('buffer/').Buffer;

module.exports = NativeModules.EtherAPIManager;

ETH_SUCCESS = 0;
ETH_FAIL = -1;

// card errors
ERR_ETH_CARDSCAN_FAILED = 0x0101;
ERR_ETH_CARD_OPEN_DENIED = 0x0102;
ERR_ETH_CARD_OPEN_FAILED = 0x0103;
ERR_ETH_CARD_CONNECTION_LOST = 0x0104;

// service errors
ERR_ETH_SERVICE_OPEN_DENIED = 0x0201;

// js card encoding constants
ETH_STRING_AS_UNICODE =  1;  // DEFAULT FOR STRING
ETH_STRING_AS_HEX 	  =  2;
ETH_STRING_AS_ASUTF8  =  3;
ETH_INT_AS_BYTE       =  4;  // DEFAULT FOR INTS
ETH_INT_AS_2BYTE      =  5;
ETH_INT_AS_4BYTE      =  6;
ETH_AS_ARRAY	      =  7;

ETH_UNICODESTRING  = 0x11;
ETH_UTF8STRING     = 0x12;
ETH_BYTE           = 0x13;
ETH_2BYTE          = 0x14;
ETH_PAYLOAD        = 0x15;
ETH_4BYTE          = 0x16;

// app level constants
ETH_DISCOVERY_COMPLETE = 0x1001;
ETH_SCAN_FOREVER       = 0X1002;

//GENERIC APP COMMAND
SERIVCE_PORT 		   = 0x16;

// mobile to card
CM_LAUNCH_APP     = 0x81;
CM_SUSPEND_APP    = 0x82;

// card to mobile
CM_RSP            = 0x01;

// error code
CM_ERR_SUCCESS          = 0x00;
CM_ERR_CARD_BUSY        = 0x01;
CM_ERR_INVALID_CMD      = 0x02;
CM_ERR_APP_NOT_ALLOWED  = 0x04;
CM_ERR_INVALID_IMG_ID   = 0x08;
CM_ERR_APP_BUSY         = 0x09;
CM_ERR_APP_DISCONNECT   = 0x0E;

var instanceNumber = 0;
if(Platform.OS == 'ios'){
	//console.log("create instance event listener");
    var g_iosEventEmitter = new NativeEventEmitter(NativeModules.EtherAPIManager);
}
module.exports = class EthernomAPI {

    // this is a module reference
    // So all instances of this class share this
    // So we have to
    manager = NativeModules.EtherAPIManager;
    _appid = 0;
    
    currID   = "";
    currName = "";
    currSN   = ""; 

    constructor(adapterConnectionString, App_ID, secsTimeout, allowDuplicates, stopScanOnWrite, callback){
        //console.log("EthernomAPIMgr.js ctor");
        this._appid = App_ID;
        this.instNo = instanceNumber;
        if(Platform.OS == 'ios'){
            //console.log("create instance event listener");
            this.iosEventEmitter = g_iosEventEmitter;
            this.discoverSubscription = null;
            this.disconnectedSubscription = null;
            this.unsolicitedSubscription = null;
        }
        //console.log("assign instance id:"+instanceNumber)
        instanceNumber = instanceNumber + 1;
		
		if(typeof App_ID == "number"){
			//console.log("NORMAL");
			this.manager._InitAPI(adapterConnectionString, App_ID, secsTimeout, allowDuplicates, stopScanOnWrite, (resultCode, instanceHandle) => {
				//console.log("back");
				//console.log(resultCode);
				//console.log(instanceHandle);
				if (resultCode == ETH_SUCCESS){
					this.instanceHandle = instanceHandle;
                /*if(Platform.OS == 'ios'){
                  this.unsolicitedEventName = 'onUnsolicitedEvent';
                  this.disconnectedEventName = 'onDisconnected';
                  this.eventDiscoverName = 'onDiscoveredDevice';
                }
                else{*/
						this.unsolicitedEventName = 'onUnsolicitedEvent'+this.instanceHandle;
						this.disconnectedEventName = 'onDisconnected'+this.instanceHandle;
						this.eventDiscoverName = 'onDiscoveredDevice'+this.instanceHandle;
				//	}
				}
				callback(resultCode);
			});
			
		}else if(typeof App_ID == "string"){
			//console.log("STRING");
			this.manager._InitDFUAPI(adapterConnectionString, App_ID, secsTimeout, allowDuplicates, stopScanOnWrite, (resultCode, instanceHandle) => {
				//console.log("back");
				//console.log(resultCode);
				//console.log(instanceHandle);
				if (resultCode == ETH_SUCCESS){
					this.instanceHandle = instanceHandle;
					 /*if(Platform.OS == 'ios'){
						this.unsolicitedEventName = 'onUnsolicitedEvent';
						this.disconnectedEventName = 'onDisconnected';
						this.eventDiscoverName = 'onDiscoveredDevice';
					}else{*/
						this.unsolicitedEventName = 'onUnsolicitedEvent'+this.instanceHandle;
						this.disconnectedEventName = 'onDisconnected'+this.instanceHandle;
						this.eventDiscoverName = 'onDiscoveredDevice'+this.instanceHandle;
					//	}
				}
				callback(resultCode);
			});
		}
    }
	
	DisconnectListeners = () => {
		if(Platform.OS == 'ios'){
			//console.log("remove event listeners");
			if (this.discoverSubscription)
				this.discoverSubscription.remove();
			
			if (this.disconnectedSubscription)
				this.disconnectedSubscription.remove();
			
			if (this.unsolicitedSubscription)
				this.unsolicitedSubscription.remove();
			
			this.iosEventEmitter = null;
		}
	}
	
	onDiscoveredDevice = (event) => {
		//console.log(event);
	};

	//_discoverCallback = null;
	//_cardDisconnectedCallback = null;
	DiscoverDevices = (callback)=>{
		//console.log("in DiscoverDevices: "+ this.instNo);
		this._discoverCallback = callback;
		if(Platform.OS == 'ios'){
			if (!this.discoverSubscription)
				this.discoverSubscription = this.iosEventEmitter.addListener(
					this.eventDiscoverName,(event) => {
					
						if(event.dSerialNum != ""){
							var trim = new Buffer(event.dSerialNum, 'hex');
							trim  = trim.reverse();
							trim = trim.slice(0, trim.length-3);
							event.dSerialNum = trim.toString('hex')
						}
						
                        this._discoverCallback(event.resultCode, event.peripheralID,event.deviceName, event.dSerialNum);
					}
				);
		}else{
			DeviceEventEmitter.addListener(this.eventDiscoverName, (event) => {
				//console.log(event.deviceID + " : "+event.deviceName);
				this._discoverCallback(event.resultCode,event.deviceID,event.deviceName);
			});
		}
		
		//console.log(this.manager);
		//console.log("Added subscription");
		try{
			this.manager._DiscoverDevices(this.instanceHandle, this.eventDiscoverName);
		}catch(e){
			//console.log(e);
		}
	}

	// the calling JS uses a callback but we achieve this via asyn notifications from the card
	OnCardDisconnected = (callback) => {
		//console.log("in OnCardDisconnected: "+ this.instNo);
		this._cardDisconnectedCallback = callback;
		//console.log("add listener: "+this.disconnectedEventName);

		if(Platform.OS == 'ios'){
			//console.log("add ios disconnected listener");
			if (!this.disconnectedSubscription)
				this.disconnectedSubscription = this.iosEventEmitter.addListener(
					this.disconnectedEventName,(event) => {
						//console.log('this:'+this);
						//console.log("OnCardDisconnected: "+this.instNo);
						//  iosEventEmitter.remove(this);
						this._cardDisconnectedCallback(event.resultCode);
					}
				);
		}else{
			DeviceEventEmitter.addListener(this.disconnectedEventName, (event) => {
				//console.log("OnCardDisconnected:");
				this._cardDisconnectedCallback(event.resultCode);
			});
		}
		//console.log("call _onCardDisconnected:"+this.instanceHandle + ":"+this.disconnectedEventName);
		this.manager._onCardDisconnected(this.instanceHandle, this.disconnectedEventName);
	}
	
	//_unsolicitedCallback = null;
	SubscribeToUnsolictedEvents = (deviceID, deviceName, msgDef, callback) => {
		//console.log("in subscribe: "+ this.instNo);
		var msg = JSON.stringify(msgDef);
		//console.log(msgDef);
		this._unsolicitedCallback = callback;
		//console.log("add listener: "+this.unsolicitedEventName);

		if(Platform.OS == 'ios'){
			//console.log("add ios unsolicited listener: "+this.unsolicitedEventName);
			if (!this.unsolicitedSubscription)
			this.unsolicitedSubscription = this.iosEventEmitter.addListener(
				this.unsolicitedEventName,(event) => {
					//console.log("unsolicited event: "+ this.instNo);
					//console.log("ethernomapimgr  got unsolicited event");
					this._unsolicitedCallback(deviceID, deviceName, event.resultCode,event.msgJSON);
				}
			);
		}else{
			//console.log("add android unsolicited listener: "+this.unsolicitedEventName);
			DeviceEventEmitter.addListener(this.unsolicitedEventName, (event) => {
				//console.log(event.deviceID + " : "+event.deviceName);
				this._unsolicitedCallback(deviceID, deviceName, event.resultCode,event.msgJSON);
			});
		}

		//console.log("call _subscribe: "+this.unsolicitedEventName);
		this.manager._SubscribeToUnsolictedEvents(this.instanceHandle, msg,this.unsolicitedEventName);
	}

	UnSubscribeToUnsolictedEvents = () => {
		//console.log("in UnSubscribeToUnsolictedEvents: "+ this.instNo);
		this._unsolicitedCallback = null;
		DeviceEventEmitter.removeListener(this.unsolicitedEventName);
		this.manager._UnSubscribeToUnsolictedEvents(this.instanceHandle, this.unsolicitedEventName);
	}

	Select = (deviceID, deviceSN, deviceName, callback) => {
		//console.log("in Select: "+ this.instNo);
		this.currID = deviceID;
		this.currSN = deviceSN;
		this.currName = deviceName;
		
		this.manager._Select(this.instanceHandle, deviceID, deviceName,  callback);
	}

	StopDiscovery = () => {
		//console.log("in StopDiscovery: "+ this.instNo);
		this.manager._StopDiscovery(this.instanceHandle);
	}

	CardClose = (callback) => {
		if (!callback){
			//console.log("set null callback");
			callback = (resultCode) => {
			
			};
		}
		this.manager._CardClose(this.instanceHandle, callback);
	}
	
	WriteJSON_Generic = (inObj, outDef, callback) => {
		//console.log("in //console: "+ this.instNo);
		var s = JSON.stringify(inObj);
		var soutdef = JSON.stringify(outDef);

		//console.log(s);
		//console.log("Card out record Definition: "+soutdef);
		this.manager._WriteJSON_Generic(this.instanceHandle, s, soutdef, callback);
    }

    WriteJSON = (inObj, outDef, callback) => {
		//console.log("in //console: "+ this.instNo);
		var s = JSON.stringify(inObj);
		var soutdef = JSON.stringify(outDef);

		//console.log(s);
		//console.log("Card out record Definition: "+soutdef);
		this.manager._WriteJSON(this.instanceHandle, s, soutdef, callback);
    }

    WriteJSON_DL = (inObj, outDef, callback) => {
		//console.log("in //console: "+ this.instNo);
		var s = JSON.stringify(inObj);
		var soutdef = JSON.stringify(outDef);

		//console.log(s);
		//console.log("Card out record Definition: "+soutdef);
		this.manager._WriteJSON_DL(this.instanceHandle, s, soutdef, callback);
    }
	
	LaunchApp = (APP_ID, callback) => {
		var inObj = [{payload: ETH_PAYLOAD}, {command: ETH_BYTE}, {p1: ETH_BYTE}, {len: ETH_2BYTE}, {code: ETH_BYTE}];
		var outObj = [{command: CM_LAUNCH_APP}, {p1: 0}, {len: {encoding:ETH_INT_AS_2BYTE, value: 1}}, {app: APP_ID}]
		this.WriteJSON_Generic(outObj, inObj, (resultCode, msg) =>{
			if(resultCode == ETH_SUCCESS){
				var msg_obj = JSON.parse(msg);
				if(msg_obj.command == CM_RSP){
					switch(msg_obj.code){
						case CM_ERR_SUCCESS:
							callback(ETH_SUCCESS);
							break;
							
						case CM_ERR_APP_BUSY:
							this._HandleAppBusy(APP_ID, callback);
							break;
							
						default:
							callback(ETH_FAIL)
							break;
					}
				}else{
					callback(ETH_FAIL);
				}
			}else{
				callback(ETH_FAIL);
			}
		});
	}

	DoAppKeyExchange = (pin, callback) => {
		console.log("in dokey");
		this.manager._DoAppKeyExchange(this.instanceHandle, pin, (resultCode, msg) =>{
			console.log("back from swift");
			if(resultCode == ETH_SUCCESS){
				console.log("key exchange succeeded");
				callback(ETH_SUCCESS);
			}else{
				console.log("key exchange failed");
				callback(ETH_FAIL);
			}
		});
	}
	WriteJSON_Encrypted = (inObj, outDef, doEncrypt, callback) => {
		//console.log("in //console: "+ this.instNo);
		var s = JSON.stringify(inObj);
		var soutdef = JSON.stringify(outDef);

		//console.log(s);
		//console.log("Card out record Definition: "+soutdef);
		this.manager._WriteJSON_Encrypted(this.instanceHandle, doEncrypt, s, soutdef, callback);
    }

	
	_HandleAppBusy = (APP_ID, LaunchAppCallback) => {
		this.DisconnectApp(callback = (resultCode) => {
			if(resultCode == ETH_SUCCESS){
				this.LaunchApp(APP_ID, callback = (resultCode) => {
					if(resultCode == ETH_SUCCESS){
						LaunchAppCallback(ETH_SUCCESS);
					}else{
						LaunchAppCallback(ETH_FAIL);
					}
				})
				
			}else if(resultCode == 1){
				this.CardClose(callback = (resultCode) => {});
				this.Select(this.currID, this.currSN, this.currName, callback = (resultCode) => {
					if(resultCode == ETH_SUCCESS){
						LaunchAppCallback(1);
					}else{
						LaunchAppCallback(ETH_FAIL);
					}
				});
			
			}else{
				LaunchAppCallback(ETH_FAIL);
			}
		})
	}
	
	DisconnectApp = (callback) => {
		var inObj = [{command: ETH_BYTE}, {p1: ETH_BYTE}, {len: ETH_2BYTE}, {code: ETH_BYTE}];
		var outObj = [{command: CM_SUSPEND_APP}, {p1: 0}, {len: {encoding:ETH_INT_AS_2BYTE, value: 1}}, {app: 0}]
		this.WriteJSON_Generic(outObj, inObj, (resultCode, msg) =>{
			if(resultCode == ETH_SUCCESS){
				var msg_obj = JSON.parse(msg);
				switch(msg_obj.command){
					case CM_RSP:
						if(msg_obj.code == CM_ERR_SUCCESS){
							callback(ETH_SUCCESS);
						}else if(msg_obj.code == CM_ERR_APP_DISCONNECT){
							callback(1);
						}else{
							callback(ETH_FAIL)
						}
						break;
					
					default:
						callback(ETH_FAIL)
						break;
				}

			}else{
				callback(ETH_FAIL);
			}
		})
	}
}
